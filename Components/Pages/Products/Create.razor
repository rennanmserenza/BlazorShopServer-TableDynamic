@page "/products/create"

@inject ApplicationDbContext Context
@inject NavigationManager Navigation

@rendermode InteractiveServer

<h1>Novo Produto</h1>

<EditForm Model="@Model" OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary /> <!-- Gera uma lista de validações dos campos do formulário. -->

    <div class="row mb-3">
        <div class="col-md-12">
            <label for="@Model.Title" class="col-form-label">Título</label>
            <InputText @bind-Value="Model.Title" class="form-control" />
            <ValidationMessage For="@(() => Model.Title)"/> <!-- Exibe apenas a validação do campo -->
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-12">
            <label for="@Model.Description" class="col-form-label">Descrição do Produto</label>
            <InputText @bind-Value="Model.Description" class="form-control" />
            <ValidationMessage For="@(() => Model.Description)" /> <!-- Exibe apenas a validação do campo -->
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="@Model.Price" class="col-form-label">Preço do Produto</label>
            <InputNumber @bind-Value="Model.Price" class="form-control" />
            <ValidationMessage For="@(() => Model.Price)" /> <!-- Exibe apenas a validação do campo -->
        </div>

        <div class="col-md-6">
            <label for="@Model.CategoryId" class="col-form-label">Categoria</label>
            <InputSelect @bind-Value="Model.CategoryId" class="form-control">
                <option value="">Selecione uma categoria</option>  <!-- Opção padrão -->
                @foreach (var category in _categories)
                {
                    <option value="@category.Id">@category.Title</option>  <!-- Exibe o ID e nome da categoria -->
                }
            </InputSelect>
            <ValidationMessage For="@(() => Model.CategoryId)" /> <!-- Exibe apenas a validação do campo -->
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <button type="button" class="btn btn-secondary" onclick="@(() => NavigateBack())">Voltar</button>
            <button type="reset" class="btn btn-danger">Limpar</button>
        </div>        
        <div class="col-md-6 d-flex justify-content-end">
            <button type="submit" class="btn btn-primary">Criar</button>
        </div>
    </div>
</EditForm>

@code {
    private List<Category> _categories { get; set; } = [];
    public Product Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _categories = await Context.Categories.AsNoTracking().ToListAsync();
    }

    public async Task OnValidSubmitAsync()
    {
        try {
            await Context.Products.AddAsync(Model);
            await Context.SaveChangesAsync();
            NavigateBack();
        }
        catch (Exception e) {
            Console.WriteLine(e.Message);
        }        
    }

    public void NavigateBack()
    {
        Navigation.NavigateTo("products");
    }
}
