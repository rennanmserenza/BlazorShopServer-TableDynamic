@page "/products"

@inject ApplicationDbContext Context
@inject NavigationManager Navigation

@attribute [StreamRendering(true)]

@rendermode InteractiveServer

<h1>Produtos</h1>

<div class="row mb-3">
    <div class="col-md-12">
        <button type="button" class="btn btn-primary" onclick="@(() => Navigation.NavigateTo("products/create"))">Criar</button>
    </div>
</div>

@if (_products.Items is null)
{
    <p class="text-center">
        <em>Nenhuma categoria encontrada ou cadastrada</em>
    </p>
}
else if (!_products.Items.Any())
{
    <p class="text-center">
        <em>Carregando os produtos...</em>
    </p>
}
else
{
    <DynamicTable ElementName="produtos"
    Data="@_products"
    ItemsPerPage="@Take"
    CurrentPage="@CurrentPage"
    OnTakeChange="OnTakeChanged"
    OnPageChange="LoadPage" />
}

@code {
    private TableResult<Product> _products = new();

    private List<TableColumn<Product>> ProductColumns => new()
    {
        new TableColumn<Product> { Header = "Id", Render = p => (MarkupString)$"{p.Id}" },
        new TableColumn<Product> { Header = "Título", RenderFragment = p => @<a href="@($"/products/{p.Id}")">@p.Title</a> },
        new TableColumn<Product> { Header = "Preço", Render = p => (MarkupString)$"{p.Price:C}" },
        new TableColumn<Product>
        {
            Header = "Ações",
            RenderFragment = p => @<div>
                    <a href="@($"products/edit/{p.Id}")" class="btn btn-warning" >
                        <i class="bi bi-pencil-square"></i> Alterar
                    </a>
                    &nbsp;
                    <a href="@($"products/delete/{p.Id}")" class="btn btn-outline-danger">
                        <i class='bi bi-trash'></i> Excluir
                    </a>
                </div>
        }
    };

    private int CurrentPage { get; set; } = 1;
    private int Take { get; set; } = 10;

    private async Task<int> GetProductsTotal() => await Context.Products.CountAsync();
    private async Task<List<Product>> GetProducts() => await Context.Products.AsNoTracking().ToListAsync();

    protected override async Task OnInitializedAsync()
    {
        await LoadTable();
    }

    private async Task LoadTable()
    {
        _products.TotalItems = await GetProductsTotal();
        PaginateElements(await GetProducts(), CurrentPage - 1, Take);
    }

    private void PaginateElements(List<Product> products, int skip, int take)
    {
        if (products.Any())
            _products.Items = products.Skip(skip * take).Take(take).ToList();
        else
            _products.Items = null;

        _products.Navigation = Navigation;
        _products.NavigateTo = "products";
        _products.Columns = ProductColumns;
    }

    private async Task OnTakeChanged(int newTakeValue)
    {
        Take = newTakeValue;
        await LoadPage();
    }

    private async Task LoadPage(int page = 1)
    {
        CurrentPage = page;
        var products = await GetProducts();
        _products.TotalItems = products.Count;

        PaginateElements(products, page - 1, Take);
    }
}
