@page "/categories"

@inject ApplicationDbContext Context
@inject NavigationManager Navigation

@attribute [StreamRendering(true)]

@rendermode InteractiveServer

<h1>Categorias</h1>

<div class="row mb-3">
    <div class="col-md-12">
        <button type="button" class="btn btn-primary" onclick="@(() => Navigation.NavigateTo("categories/create"))">Criar</button>
    </div>
</div>

@if (_categories is null)
{
    <p class="text-center">
        <em>Nenhuma categoria encontrada ou cadastrada</em>
    </p>
}
else if (!_categories.Items.Any())
{
    <p class="text-center">
        <em>Carregando as categorias...</em>
    </p>
}
else
{
    <DynamicTable ElementName="categorias"
                  Data="@_categories"
                  ItemsPerPage="@Take"
                  CurrentPage="@CurrentPage"
                  OnTakeChange="OnTakeChanged"
                  OnPageChange="LoadPage" />
}

@code {
    private TableResult<Category> _categories = new();

    private List<TableColumn<Category>> ProductColumns => new()
    {
        new TableColumn<Category> { Header = "Id", Render = p => (MarkupString)$"{p.Id}" },
        new TableColumn<Category> { Header = "Título", RenderFragment = p => @<a href="@($"/categories/{p.Id}")">@p.Title</a> },
        new TableColumn<Category>
        {
            Header = "Ações",
            RenderFragment = p => @<div>
                <a href="@($"categories/edit/{p.Id}")" class="btn btn-warning">
                    <i class="bi bi-pencil-square"></i> Alterar
                </a>
                &nbsp;
                <a href="@($"categories/delete/{p.Id}")" class="btn btn-outline-danger">
                    <i class='bi bi-trash'></i> Excluir
                </a>
            </div>
        }
    };

    private int CurrentPage { get; set; } = 1;
    private int Take { get; set; } = 10;

    private async Task<int> GetCategoriesTotal() => await Context.Categories.CountAsync();
    private async Task<List<Category>> GetCategories() => await Context.Categories.AsNoTracking().ToListAsync();

    protected override async Task OnInitializedAsync()
    {
        await LoadTable();
    }

    private async Task LoadTable()
    {
        _categories.TotalItems = await GetCategoriesTotal();
        PaginateElements(await GetCategories(), CurrentPage - 1, Take);
    }

    private void PaginateElements(List<Category> categories, int skip, int take)
    {
        if (categories.Any())
            _categories.Items = categories.Skip(skip * take).Take(take).ToList();
        else
            _categories.Items = null;

        _categories.Navigation = Navigation;
        _categories.NavigateTo = "products";
        _categories.Columns = ProductColumns;
    }

    private async Task OnTakeChanged(int newTakeValue)
    {
        Take = newTakeValue;
        await LoadPage();
    }

    private async Task LoadPage(int page = 1)
    {
        CurrentPage = page;
        _categories.TotalItems = await GetCategoriesTotal();
        PaginateElements(await GetCategories(), CurrentPage - 1, Take);
    }
}
